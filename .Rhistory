}
for(i in 1:length(vec_predictors)){
v <- vec_predictors[i]
mutate(dat[,..v] := dat[,..v] + 0.5 * (min_vals[i]) )
}
nv <- dat[,..v] + 0.5*(min_vals[i])
nv
dat[,..v] <- nv
for(i in 1:length(vec_predictors)){
v <- vec_predictors[i]
nv <- dat[,..v] + 0.5*(min_vals[i])
mutate(dat, "{v}" := nv)
}
setwd("C:/Users/duenk002/OneDrive - WageningenUR/Projects/11 EPI prediction")
library(dplyr)
library(data.table)
library(tidyr)
library(caret)
library(randomForest)
library(h2o)
library(kernlab)
library(ggplot2)
library(GGally)
library(gridExtra)
theme_set(theme_classic(base_size = 10) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5)))
options(stringsAsFactors = F)
# Functions ---------------------------------------------------------------
# Matthews correlation
Matt_Coef <- function (conf_matrix)
{
TP <- conf_matrix$table[1,1]
TN <- conf_matrix$table[2,2]
FP <- conf_matrix$table[1,2]
FN <- conf_matrix$table[2,1]
mcc_num <- (TP*TN - FP*FN)
mcc_den <- as.double((TP+FP))*as.double((TP+FN))*as.double((TN+FP))*as.double((TN+FN))
mcc_final <- mcc_num/sqrt(mcc_den)
return(mcc_final)
}
# density plot of each variable
histplot <- function(df, vbl){
ggp <- ggplot(df, aes_string(x = vbl))+
geom_histogram(color="darkblue", fill="lightblue")+
ggtitle(vbl)+
labs(x="")
return(ggp)
}
# Read data ---------------------------------------------------------------
dat <- fread("data_complete.csv", header=T) %>%
filter(promoter_chrom == "chr6")
cnames <- colnames(dat)
cnames2 <- sapply(cnames, function(x){gsub("\\(","",x)})
cnames2 <- sapply(cnames2, function(x){gsub("\\)","",x)})
cnames2 <- sapply(cnames2, function(x){gsub("_",".",x)})
cnames2 <- sapply(cnames2, function(x){gsub(" ",".",x)})
colnames(dat) <- cnames2
# select predictors
vec_predictors <- c("H3K27ac.enhancer", "H3K27ac.promoter", "H3K27ac.window",
"H3K27me3.enhancer", "H3K27me3.promoter", "H3K27me3.window",
"H3K4me1.enhancer", "H3K4me1.promoter", "H3K4me1.window",
"Methylation.enhancer", "Methylation.promoter", "Methylation.window",
"atac.enhancer","atac.promoter","atac.window","gene.expression")
target_var <- "label"
# Summary statistics and plots --------------------------------------------
sum_predictors <- dat %>%
select(all_of(c(target_var, vec_predictors))) %>%
summarise_all(list(mean = function(x){mean(x, na.rm=T)},
sd = function(x){sd(x, na.rm=T)},
min = function(x){min(x, na.rm=T)},
max = function(x){max(x, na.rm=T)},
n = function(x){sum(!is.na(x))},
nNA = function(x){sum(is.na(x))})) %>%
gather(stat,val) %>%
separate(stat, into = c("var", "stat"), sep = "_") %>%
spread(stat, val)
write.csv(sum_predictors, "summary.csv", row.names = F, quote = F)
# # correlation plot
# corplot <- dat %>%
#   select(all_of(vec_predictors)) %>%
#   ggpairs(.) +
#   theme_bw()
#
# corplot
# ggsave("corplot.png", width=75,  height=75, units = "mm", scale=5)
# plots <- list()
# for(i in 1:length(vec_predictors)){
#   plots[[i]] <- histplot(dat, vec_predictors[i])
# }
#
# ggsave("histograms.pdf", do.call(arrangeGrob, c(plots, list(nrow=4, ncol=4))),
#        width=150, height=150, scale=1.5, units="mm")
# Pre processing ----------------------------------------------------------
# adjust atac values according to size #
dat <- dat %>%
mutate(windsize := windend - windstart,
promsize := promend - promstart,
enhsize := enhend - enhstart) %>%
mutate(atac.window.c := (atac.window/windsize),
atac.promoter.c := (atac.promoter/promsize),
atac.enhancer.c := (atac.enhancer/enhsize))
# add a small number to values of variables that have a minimum of 0, so that we can use log transformation
min_vals <- dat %>%
select(all_of(vec_predictors)) %>%
sapply(., function(x){min(x[x>0])})
tmp <- dat$H3K27ac.enhancer
for(i in 1:length(vec_predictors)){
v <- vec_predictors[i]
nv <- dat[,..v] + 0.5*(min_vals[i])
mutate(dat, "{v}" := nv)
}
tmp2 <- dat$H3K27ac.enhancer
tmp
tmp2
for(i in 1:length(vec_predictors)){
v <- vec_predictors[i]
nv <- dat[,..v] + 0.5*(min_vals[i])
dat <- mutate(dat, "{v}" := nv)
}
tmp2 <- dat$H3K27ac.enhancer
tmp
tmp2
min_vals[1]
tmp[1588]
tmp[1588] + 0.5*min_vals[1]
setwd("C:/Users/duenk002/OneDrive - WageningenUR/Projects/11 EPI prediction")
library(dplyr)
library(data.table)
library(tidyr)
library(caret)
library(randomForest)
library(h2o)
library(kernlab)
library(ggplot2)
library(GGally)
library(gridExtra)
theme_set(theme_classic(base_size = 10) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5)))
options(stringsAsFactors = F)
# Functions ---------------------------------------------------------------
# Matthews correlation
Matt_Coef <- function (conf_matrix)
{
TP <- conf_matrix$table[1,1]
TN <- conf_matrix$table[2,2]
FP <- conf_matrix$table[1,2]
FN <- conf_matrix$table[2,1]
mcc_num <- (TP*TN - FP*FN)
mcc_den <- as.double((TP+FP))*as.double((TP+FN))*as.double((TN+FP))*as.double((TN+FN))
mcc_final <- mcc_num/sqrt(mcc_den)
return(mcc_final)
}
# density plot of each variable
histplot <- function(df, vbl){
ggp <- ggplot(df, aes_string(x = vbl))+
geom_histogram(color="darkblue", fill="lightblue")+
ggtitle(vbl)+
labs(x="")
return(ggp)
}
# Read data ---------------------------------------------------------------
dat <- fread("data_complete.csv", header=T) %>%
filter(promoter_chrom == "chr6")
cnames <- colnames(dat)
cnames2 <- sapply(cnames, function(x){gsub("\\(","",x)})
cnames2 <- sapply(cnames2, function(x){gsub("\\)","",x)})
cnames2 <- sapply(cnames2, function(x){gsub("_",".",x)})
cnames2 <- sapply(cnames2, function(x){gsub(" ",".",x)})
colnames(dat) <- cnames2
# select predictors
vec_predictors <- c("H3K27ac.enhancer", "H3K27ac.promoter", "H3K27ac.window",
"H3K27me3.enhancer", "H3K27me3.promoter", "H3K27me3.window",
"H3K4me1.enhancer", "H3K4me1.promoter", "H3K4me1.window",
"Methylation.enhancer", "Methylation.promoter", "Methylation.window",
"atac.enhancer","atac.promoter","atac.window","gene.expression")
target_var <- "label"
# Summary statistics and plots --------------------------------------------
sum_predictors <- dat %>%
select(all_of(c(target_var, vec_predictors))) %>%
summarise_all(list(mean = function(x){mean(x, na.rm=T)},
sd = function(x){sd(x, na.rm=T)},
min = function(x){min(x, na.rm=T)},
max = function(x){max(x, na.rm=T)},
n = function(x){sum(!is.na(x))},
nNA = function(x){sum(is.na(x))})) %>%
gather(stat,val) %>%
separate(stat, into = c("var", "stat"), sep = "_") %>%
spread(stat, val)
write.csv(sum_predictors, "summary.csv", row.names = F, quote = F)
# # correlation plot
# corplot <- dat %>%
#   select(all_of(vec_predictors)) %>%
#   ggpairs(.) +
#   theme_bw()
#
# corplot
# ggsave("corplot.png", width=75,  height=75, units = "mm", scale=5)
plots <- list()
for(i in 1:length(vec_predictors)){
plots[[i]] <- histplot(dat, vec_predictors[i])
}
ggsave("histograms.pdf", do.call(arrangeGrob, c(plots, list(nrow=4, ncol=4))),
width=150, height=150, scale=1.5, units="mm")
# Pre processing ----------------------------------------------------------
# adjust atac values according to size #
dat <- dat %>%
mutate(windsize := windend - windstart,
promsize := promend - promstart,
enhsize := enhend - enhstart) %>%
mutate(atac.window.c := (atac.window/windsize),
atac.promoter.c := (atac.promoter/promsize),
atac.enhancer.c := (atac.enhancer/enhsize))
# add a small number to values of variables that have a minimum of 0, so that we can use log transformation
min_vals <- dat %>%
select(all_of(vec_predictors)) %>%
sapply(., function(x){min(x[x>0])})
for(i in 1:length(vec_predictors)){
v <- vec_predictors[i]
nv <- dat[,..v] + 0.5*(min_vals[i])
dat <- dat %>% mutate("{v}" := nv)
}
# log-transform values that are skewed
dat <- dat %>%
mutate(across(all_of(vec_predictors), .fns = list(log = ~ log(.)), .names = "{.col}.log"))
# plot log transformed variables
vec_predictors2 <- paste0(vec_predictors, ".log")
plots <- list()
for(i in 1:length(vec_predictors2)){
plots[[i]] <- histplot(dat, vec_predictors2[i])
}
ggsave("histograms_log.pdf", do.call(arrangeGrob, c(plots, list(nrow=4, ncol=4))),
width=150, height=150, scale=1.5, units="mm")
setwd("C:/Users/duenk002/OneDrive - WageningenUR/Projects/11 EPI prediction")
library(dplyr)
library(data.table)
library(tidyr)
library(caret)
library(randomForest)
library(h2o)
library(kernlab)
library(ggplot2)
library(GGally)
library(gridExtra)
theme_set(theme_classic(base_size = 10) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5)))
options(stringsAsFactors = F)
# Functions ---------------------------------------------------------------
# Matthews correlation
Matt_Coef <- function (conf_matrix)
{
TP <- conf_matrix$table[1,1]
TN <- conf_matrix$table[2,2]
FP <- conf_matrix$table[1,2]
FN <- conf_matrix$table[2,1]
mcc_num <- (TP*TN - FP*FN)
mcc_den <- as.double((TP+FP))*as.double((TP+FN))*as.double((TN+FP))*as.double((TN+FN))
mcc_final <- mcc_num/sqrt(mcc_den)
return(mcc_final)
}
# density plot of each variable
histplot <- function(df, vbl){
ggp <- ggplot(df, aes_string(x = vbl))+
geom_histogram(color="darkblue", fill="lightblue")+
ggtitle(vbl)+
labs(x="")
return(ggp)
}
# Read data ---------------------------------------------------------------
dat <- fread("data_complete.csv", header=T) %>%
filter(promoter_chrom == "chr6")
cnames <- colnames(dat)
cnames2 <- sapply(cnames, function(x){gsub("\\(","",x)})
cnames2 <- sapply(cnames2, function(x){gsub("\\)","",x)})
cnames2 <- sapply(cnames2, function(x){gsub("_",".",x)})
cnames2 <- sapply(cnames2, function(x){gsub(" ",".",x)})
colnames(dat) <- cnames2
# select predictors
vec_predictors <- c("H3K27ac.enhancer", "H3K27ac.promoter", "H3K27ac.window",
"H3K27me3.enhancer", "H3K27me3.promoter", "H3K27me3.window",
"H3K4me1.enhancer", "H3K4me1.promoter", "H3K4me1.window",
"Methylation.enhancer", "Methylation.promoter", "Methylation.window",
"atac.enhancer","atac.promoter","atac.window","gene.expression")
target_var <- "label"
# Summary statistics and plots --------------------------------------------
sum_predictors <- dat %>%
select(all_of(c(target_var, vec_predictors))) %>%
summarise_all(list(mean = function(x){mean(x, na.rm=T)},
sd = function(x){sd(x, na.rm=T)},
min = function(x){min(x, na.rm=T)},
max = function(x){max(x, na.rm=T)},
n = function(x){sum(!is.na(x))},
nNA = function(x){sum(is.na(x))})) %>%
gather(stat,val) %>%
separate(stat, into = c("var", "stat"), sep = "_") %>%
spread(stat, val)
write.csv(sum_predictors, "summary.csv", row.names = F, quote = F)
# # correlation plot
# corplot <- dat %>%
#   select(all_of(vec_predictors)) %>%
#   ggpairs(.) +
#   theme_bw()
#
# corplot
# ggsave("corplot.png", width=75,  height=75, units = "mm", scale=5)
plots <- list()
for(i in 1:length(vec_predictors)){
plots[[i]] <- histplot(dat, vec_predictors[i])
}
ggsave("histograms.pdf", do.call(arrangeGrob, c(plots, list(nrow=4, ncol=4))),
width=150, height=150, scale=1.5, units="mm")
# Pre processing ----------------------------------------------------------
# adjust atac values according to size #
dat <- dat %>%
mutate(windsize := windend - windstart,
promsize := promend - promstart,
enhsize := enhend - enhstart) %>%
mutate(atac.window.c := (atac.window/windsize),
atac.promoter.c := (atac.promoter/promsize),
atac.enhancer.c := (atac.enhancer/enhsize))
# add a small number to values of variables that have a minimum of 0, so that we can use log transformation
min_vals <- dat %>%
select(all_of(vec_predictors)) %>%
sapply(., function(x){min(x[x>0])})
for(i in 1:length(vec_predictors)){
v <- vec_predictors[i]
nv <- dat[,..v] + 0.5*(min_vals[i])
dat <- dat %>% mutate("{v}" := nv)
}
# log-transform values that are skewed
dat <- dat %>%
mutate(across(all_of(vec_predictors), .fns = list(log = ~ log(.)), .names = "{.col}.log"))
# plot log transformed variables
vec_predictors2 <- paste0(vec_predictors, ".log")
plots <- list()
for(i in 1:length(vec_predictors2)){
plots[[i]] <- histplot(dat, vec_predictors2[i])
}
ggsave("histograms_log.pdf", do.call(arrangeGrob, c(plots, list(nrow=4, ncol=4))),
width=150, height=150, scale=1.5, units="mm")
dev.off()
setwd("C:/Users/duenk002/OneDrive - WageningenUR/Projects/11 EPI prediction")
library(dplyr)
library(data.table)
library(tidyr)
library(caret)
library(randomForest)
library(h2o)
library(kernlab)
library(ggplot2)
library(GGally)
library(gridExtra)
theme_set(theme_classic(base_size = 10) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5)))
options(stringsAsFactors = F)
# Functions ---------------------------------------------------------------
# Matthews correlation
Matt_Coef <- function (conf_matrix)
{
TP <- conf_matrix$table[1,1]
TN <- conf_matrix$table[2,2]
FP <- conf_matrix$table[1,2]
FN <- conf_matrix$table[2,1]
mcc_num <- (TP*TN - FP*FN)
mcc_den <- as.double((TP+FP))*as.double((TP+FN))*as.double((TN+FP))*as.double((TN+FN))
mcc_final <- mcc_num/sqrt(mcc_den)
return(mcc_final)
}
# density plot of each variable
histplot <- function(df, vbl){
ggp <- ggplot(df, aes_string(x = vbl))+
geom_histogram(color="darkblue", fill="lightblue")+
ggtitle(vbl)+
labs(x="")
return(ggp)
}
# Read data ---------------------------------------------------------------
dat <- fread("data_complete.csv", header=T) %>%
filter(promoter_chrom == "chr6")
cnames <- colnames(dat)
cnames2 <- sapply(cnames, function(x){gsub("\\(","",x)})
cnames2 <- sapply(cnames2, function(x){gsub("\\)","",x)})
cnames2 <- sapply(cnames2, function(x){gsub("_",".",x)})
cnames2 <- sapply(cnames2, function(x){gsub(" ",".",x)})
colnames(dat) <- cnames2
# select predictors
vec_predictors <- c("H3K27ac.enhancer", "H3K27ac.promoter", "H3K27ac.window",
"H3K27me3.enhancer", "H3K27me3.promoter", "H3K27me3.window",
"H3K4me1.enhancer", "H3K4me1.promoter", "H3K4me1.window",
"Methylation.enhancer", "Methylation.promoter", "Methylation.window",
"atac.enhancer","atac.promoter","atac.window","gene.expression")
target_var <- "label"
# Summary statistics and plots --------------------------------------------
sum_predictors <- dat %>%
select(all_of(c(target_var, vec_predictors))) %>%
summarise_all(list(mean = function(x){mean(x, na.rm=T)},
sd = function(x){sd(x, na.rm=T)},
min = function(x){min(x, na.rm=T)},
max = function(x){max(x, na.rm=T)},
n = function(x){sum(!is.na(x))},
nNA = function(x){sum(is.na(x))})) %>%
gather(stat,val) %>%
separate(stat, into = c("var", "stat"), sep = "_") %>%
spread(stat, val)
write.csv(sum_predictors, "summary.csv", row.names = F, quote = F)
# # correlation plot
# corplot <- dat %>%
#   select(all_of(vec_predictors)) %>%
#   ggpairs(.) +
#   theme_bw()
#
# corplot
# ggsave("corplot.png", width=75,  height=75, units = "mm", scale=5)
plots <- list()
for(i in 1:length(vec_predictors)){
plots[[i]] <- histplot(dat, vec_predictors[i])
}
ggsave("histograms.pdf", do.call(arrangeGrob, c(plots, list(nrow=4, ncol=4))),
width=150, height=150, scale=1.5, units="mm")
# Pre processing ----------------------------------------------------------
# adjust atac values according to size #
dat <- dat %>%
mutate(windsize := windend - windstart,
promsize := promend - promstart,
enhsize := enhend - enhstart) %>%
mutate(atac.window.c := (atac.window/windsize),
atac.promoter.c := (atac.promoter/promsize),
atac.enhancer.c := (atac.enhancer/enhsize))
# add a small number to values of variables that have a minimum of 0, so that we can use log transformation
min_vals <- dat %>%
select(all_of(vec_predictors)) %>%
sapply(., function(x){min(x[x>0])})
for(i in 1:length(vec_predictors)){
v <- vec_predictors[i]
nv <- dat[,..v] + 0.5*(min_vals[i])
dat <- dat %>% mutate("{v}" := as.numeric(nv))
}
# log-transform values that are skewed
dat <- dat %>%
mutate(across(all_of(vec_predictors), .fns = list(log = ~ log(.)), .names = "{.col}.log"))
# plot log transformed variables
vec_predictors2 <- paste0(vec_predictors, ".log")
plots <- list()
for(i in 1:length(vec_predictors2)){
plots[[i]] <- histplot(dat, vec_predictors2[i])
}
ggsave("histograms_log.pdf", do.call(arrangeGrob, c(plots, list(nrow=4, ncol=4))),
width=150, height=150, scale=1.5, units="mm")
tmp + 0.5*min_vals[1]
tmp + 0.5*min_vals[1] == tmp2
# create data partition
trainFraction <- 0.8
trainIx <- createDataPartition(dat[,label], p = trainFraction, list = FALSE)
explanatoryTrain <- dat %>%
slice(trainIx) %>%
select(setdiff(vec_predictors2, target_var))
explanatoryTest <- dat %>%
slice(-trainIx) %>%
select(setdiff(vec_predictors2, target_var))
targetTrain <- dat %>%
slice(trainIx) %>%
pull(target_var)
targetTest <- dat %>%
slice(-trainIx) %>%
pull(target_var)
# center and scale each variable
# do this separately for the training and test set!
explanatoryTrain <- explanatoryTrain %>%
mutate_all(.funs = scale)
explanatoryTest <- explanatoryTest %>%
mutate_all(.funs = scale)
# complete train and test sets
dataTrain <- explanatoryTrain %>%
mutate(label := as.factor(targetTrain))
dataTest <- explanatoryTest %>%
mutate(label := targetTest)
# plot histograms of scaled features
plots <- list()
for(i in 1:length(vec_predictors2)){
plots[[i]] <- histplot(explanatoryTrain, vec_predictors2[i])
}
ggsave("histograms_log_scaled.pdf", do.call(arrangeGrob, c(plots, list(nrow=4, ncol=4))),
width=150, height=150, scale=1.5, units="mm")
# plot histograms of scaled features
plots <- list()
for(i in 1:length(vec_predictors2)){
plots[[i]] <- histplot(explanatoryTrain, vec_predictors2[i])
}
ggsave("histograms_log_scaled.pdf", do.call(arrangeGrob, c(plots, list(nrow=4, ncol=4))),
width=150, height=150, scale=1.5, units="mm")
vec_predictors2[1]
histplot(explanatoryTrain, vec_predictors2[1])
summary(vec_predictors2[1])
summary(explanatoryTrain[,..vec_predictors2[1]))
summary(explanatoryTrain[,..vec_predictors2[1])
summary(explanatoryTrain[,..vec_predictors2[1]])
summary(explanatoryTrain %>% select(vec_predictors2[1]))
